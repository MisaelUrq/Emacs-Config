(list "normal" "insert")
(list "normal" "insert")
(setq sad (list "normal" "insert"))
asd
(asd))
(asd)
(lenght (list "normal" "insert"))
(length (list "normal" "insert"))
(setq sad '(normal insert))
(< (length  '(normal insert)) 0)
(< (length  '(normal insert)) 1)
(< (length  '(normal insert)) 2)
(< (length  '(normal insert)) 3)
(< (length  '(normal insert)) 5)
(> (length  '(normal insert)) 0)
(for state in '(normal insert)) (+ 2 1))
(loop for state in '(normal insert)) (+ 2 1))
(loop for state in '(normal insert)) (print state))
(loop for state in '(normal insert)) (format state))
(loop for state in '(normal insert)) (format -t state))
(loop for state in '(normal insert) do (print state))
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) "S-k" 'kill-this-buffer)
(buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) "\"S-k\"" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) ""S-k"" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) ""S-k"" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) "\"S-k\"" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) "%"S-k%"" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) "\"S-k\"" 'kill-this-buffer)
(#'kill-this-buffer)
(#'print )
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) "\"S-k\"" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal operator) '(global-map eshell-mode) "\"S-k\"" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
(apply-key-to-evil-modes '(normal) '(global-map) "S-k" 'kill-this-buffer)
('normal)
('(normal))
(setq l '(normal))
(setq l 'normal)
(setq l '(normal vi))
(length (l '(normal vi)))
(length '(normal vi))
(kill-buffer "*Calendar*")
(frame-parameter)
(frame-parameters)
(defun get-element (list name) (cadr (assoc name list :test #'string=)))
(get-element (frame-parameters) 'undecorated)
(get-element (frame-parameters) "str")
(get-element '(uno dos) 'uno)
((lenght frame-parameters))
((length frame-parameters))
(length frame-parameters)
(length (frame-parameters))
(nth ((length (frame-parameters))-2) (frame-parameters))
(nth (- (length (frame-parameters)) 2) (frame-parameters))
(nth (- (length (frame-parameters)) 3) (frame-parameters))
(frame-parameter 'undecorated)
(get-frame)
(list-frame)
(list-frames)
(frame-list)
(pop (frame-list))
(pop '(frame-list))
(car (frame-list))
(frame-parameter (car (frame-list) 'undecorated))
(frame-parameter (car (frame-list) ))
(frame-parameter )
(frame-parameter (car (frame-list) 'undecorated))
(frame-parameter (car (frame-list)) 'undecorated)
(defun toggle-frame-border ()  ((if (frame-parameter (car (frame-list)) 'undecorated)       (set-frame-parameter 'undecorated nil)     (set-frame-parameter 'undecorated t))))
(toggle-frame-border)
(defun toggle-frame-border ()  ((if (frame-parameter (car (frame-list)) 'undecorated) t       (set-frame-parameter 'undecorated nil)     (set-frame-parameter 'undecorated t))))
